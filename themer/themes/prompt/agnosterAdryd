CURRENT_BG='NONE'


  if [[ $TERM == "linux" ]]; then
    SEGMENT_SEPERATOR=" "
    T_LOCK=""
    T_GIT="(git)"
    T_PLUS="+"
    T_CIRCLE="·"
    T_FORK="¬"
  else
    SEGMENT_SEPARATOR=$'\ue0b0'
    T_LOCK=" " # include space so its easier
    T_GIT=$''
    T_PLUS="✚"
    T_CIRCLE="●"
    T_FORK="➦"
  fi



# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    echo -n " %{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%} "
  else
    echo -n "%{$bg%}%{$fg%} "
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && echo -n $3
}

# End the prompt, closing any open segments
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    echo -n " %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
    echo -n "%{%k%}"
  fi
  echo -n "%{%f%}"
  CURRENT_BG=''
}


### Prompt components
# Each component will draw itself, and hide itself if no information needs to be shown

# Context: user@hostname (who am I and where am I)
prompt_context() {
  if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then
    prompt_segment 239 255  "%(!.%{%F{yellow}%}.)$USER"
  fi  
  if [[ $HOST == "popsicle.p.adryd.com" ]]; then
    prompt_segment 12 black "$T_LOCK%m"
  elif [[ $HOST == "lemon" ]]; then
    prompt_segment yellow black "$T_LOCK%m"
  else 
    prompt_segment 236 255 "$T_LOCK%m" 
  fi
}

# Git: branch/detached head, dirty status
prompt_git() {
  
  local PL_BRANCH_CHAR
  () {
    local LC_ALL="" LC_CTYPE="en_US.UTF-8"
    PL_BRANCH_CHAR=$T_GIT        # 
  }
  local ref dirty mode repo_path
  repo_path=$(git rev-parse --git-dir 2>/dev/null)

  if $(git rev-parse --is-inside-work-tree >/dev/null 2>&1); then
    dirty=$(parse_git_dirty)
    ref=$(git symbolic-ref HEAD 2> /dev/null) || ref="$T_FORK $(git rev-parse --short HEAD 2> /dev/null)"
    if [[ -n $dirty ]]; then
      prompt_segment yellow black
    else
      prompt_segment green black
    fi

    if [[ -e "${repo_path}/BISECT_LOG" ]]; then
      mode=" <B>"
    elif [[ -e "${repo_path}/MERGE_HEAD" ]]; then
      mode=" >M<"
    elif [[ -e "${repo_path}/rebase" || -e "${repo_path}/rebase-apply" || -e "${repo_path}/rebase-merge" || -e "${repo_path}/../.dotest" ]]; then
      mode=" >R>"
    fi

    setopt promptsubst
    autoload -Uz vcs_info

    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:*' get-revision true
    zstyle ':vcs_info:*' check-for-changes true
    zstyle ':vcs_info:*' stagedstr "$T_PLUS"
    zstyle ':vcs_info:*' unstagedstr "$T_CIRCLE"
    zstyle ':vcs_info:*' formats ' %u%c'
    zstyle ':vcs_info:*' actionformats ' %u%c'
    vcs_info
    echo -n "${ref/refs\/heads\//$PL_BRANCH_CHAR }${vcs_info_msg_0_%% }${mode}"
  fi
}

prompt_dir() {
   if [[ $COLORS == "Shells" ]] then
    prompt_segment blue white '%~'
  else 
    prompt_segment blue black '%~'
  fi
  
}

prompt_status() {
  [[ $(jobs -l | wc -l) -gt 0 ]] && prompt_segment cyan black "$(jobs -l | wc -l | sed 's/^ *//')"
  [[ $RETVAL -ne 0 && $RETVAL -ne 127 && $RETVAL -ne 130 && $RETVAL -ne 146 ]] && prompt_segment red default "$RETVAL"
  [[ $RETVAL -eq 130 ]] && prompt_segment yellow black "$RETVAL"
  [[ $RETVAL -eq 127 ]] && prompt_segment yellow black "$RETVAL"
  [[ $RETVAL -eq 146 ]] && prompt_segment magenta black "$RETVAL"
  [[ $RETVAL -eq 0 ]] && prompt_segment green black "$RETVAL"
}

## Main prompt
build_prompt() {
  RETVAL=$?
  #prompt_segment 10 black "%{$fg_bold[black]%}INSERT%{$reset_color%b%}"
  #prompt_segment 10 black ""
  # use 7 for a nice white is color
  prompt_context
  prompt_dir
  prompt_git
  #prompt_bzr
  #prompt_hg
  prompt_status
  prompt_end
}

PROMPT='%{%f%b%k%}$(build_prompt) '
