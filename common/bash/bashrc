#!/usr/bin/env bash
if [[ $- == *i* ]]
then
    for dir in "${HOME}/.adryd" /opt/adryd-dotfiles; do 
        if [[ -f "${dir}/.manifest" ]] && [[ "$(cat "${dir}/.manifest")" = "adryd-dotfiles-v6" ]]; then
            export AR_DIR="${dir}"
            break
        fi
        return 1
    done

    # normalize paths (useful for brew on macos)
    mapfile -d ':' splitPath <<< "${PATH}"
    function hasPath {
        includes=1
        for dir in "${splitPath[@]}"; do
            [[ "${dir}" = "$1" ]] && includes=0
        done
        return "${includes}"
    }
    
    for dir in /bin /usr/bin /usr/local/bin ${HOME}/.local/bin; do 
        if ! hasPath "$(realpath "${dir}")" && [[ -d "${dir}" ]]; then
            PATH="${dir}:${PATH}"
        fi
    done

    # shellcheck source=../../lib/os.sh
    source "${AR_DIR}/lib/os.sh"

    for editor in nvim vim vi nano; do
        if [[ -x "$(command -v "${editor}")" ]]; then
            export EDITOR="${editor}"
            export VISUAL="${editor}"
            break
        fi
    done

    ! hasPath "${AR_DIR}/common/bin" && PATH="${AR_DIR}/common/bin:${PATH}"

    for host in "${AR_DIR}/hosts/"*; do
        if [[ "$(basename "${host}")" = "${HOSTNAME}" ]] && [[ -d "${host}/bin" ]] && ! hasPath "${host}/bin"; then
            PATH="${host}/bin:${PATH}"
        fi
    done

    [[ -d "${AR_DIR}/oses/$(getKernel)/bin" ]] && ! hasPath "${AR_DIR}/oses/$(getKernel)/bin:${PATH}" && PATH="${AR_DIR}/oses/$(getKernel)/bin:${PATH}"
    [[ -d "${AR_DIR}/oses/$(getDistro)/bin" ]] && ! hasPath "${AR_DIR}/oses/$(getDistro)/bin:${PATH}" && PATH="${AR_DIR}/oses/$(getDistro)/bin:${PATH}"

    export PATH

    # shellcheck source=./prompts/robyrussel.sh
    source "${AR_DIR}/common/bash/prompts/robyrussel.sh"
    # shellcheck source=./bash_aliases.sh
    source "${AR_DIR}/common/bash/bash_aliases.sh"

    # glob (*) selects files that begin with a dot too
    shopt -s dotglob

    # load nvm
    [[ -e "/usr/share/nvm/init-nvm.sh" ]] && source /usr/share/nvm/init-nvm.sh

    # cleanup imports
    unset getKernel
    unset getDistro
fi